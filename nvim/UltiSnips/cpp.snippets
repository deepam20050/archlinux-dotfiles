snippet kkl "CP C++ Template" b
#include "bits/stdc++.h"
using namespace std;

#define sz(x) int((x).size())
#define all(x) begin(x), end(x)
#define eb emplace_back
#define em emplace
#define mp make_pair
#define F first
#define S second
#define FOR(i, a, b) for (int i = (a); i < (b); ++i)

using lli = long long;
using pii = pair < int, int >;

int main () {
  return 0;
}
endsnippet

snippet tdsu "DSU data structure" b
struct DSU {
  int size[N];
  int p[N];
  void init (int n) {
		iota(init, init + n + 1, 0);
  }
  inline int get (int a) {
    return (p[a] == a) ? a : p[a] = get(p[a]);
  }
  inline bool join (int a, int b) {
    a = get(a);
    b = get(b);
		if (a == b) return 0;
		if (size[a] < size[b]) {
			swap(a, b);
		}
		size[a] += size[b];
		p[b] = a;
		return 1;
  }
};
endsnippet

snippet tfio "Fast IO cin/cout" b
ios_base::sync_with_stdio(0);
cin.tie(0);
endsnippet

snippet tmatrix "Matrix exponentiation" b
const int MOD = 1e9 + 7;

inline int add (int __a, int __b, int MM = MOD) {
  return (__a + __b) % MM;
}

inline int mul (int __a, int __b, int MM = MOD) {
  return __a * 1ll * __b % MM;
}

struct Matrix {
  vector < vector < int > > mat;
  int n_rows, n_cols;
  Matrix () {}
  Matrix (vector < vector < int > > val) : mat(val), n_rows(val.size()), n_cols(val[0].size()) {}
  static Matrix identity_matrix (int n) {
    vector < vector < int > > iden(n, vector < int > (n));
    FOR(i, 0, n) iden[i][i] = 1;
    return move(iden);
  }
  Matrix operator *(const Matrix &other) const {
    int n = n_rows, m = other.n_cols;
    vector < vector < int > > product(n, vector < int > (m));
    FOR(i, 0, n) FOR(j, 0, m) FOR(k, 0, n_cols) {
      product[i][j] = add(product[i][j], mul(mat[i][k], other.mat[k][j]));
    }
    return move(Matrix(move(product)));
  }
};

Matrix bin_pow (Matrix a, long long b) {
  Matrix prod = Matrix::identity_matrix(a.n_cols);
  while (b > 0) {
    if (b & 1) prod = prod * a;
    a = a * a;
    b >>= 1ll;
  }
  return prod;
}
endsnippet

snippet tsmallestprime "Smallest Prime" b
const int ${1:limit name} = ${2:limit};

int sp[$1];
bitset < $1 > vis_prime;

// Credits : https://codeforces.com/blog/entry/7262
inline void sieve () {
  for (int i = 2; i < $1; i += 2) sp[i] = 2;
  for (int i = 3; i < $1; i += 2) 
    if (!vis_prime[i]) {
      sp[i] = i;
      for (int j = i; j * 1ll * i < 1ll * $1; j += 2) {
        if (!vis_prime[j * i]) vis_prime[j * i] = 1, sp[j * i] = i;
      }
    }
}
endsnippet

snippet tpolicy "Policy DS" b
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

template < typename T > using ordered_set = tree < T, null_type, less < T > , rb_tree_tag,tree_order_statistics_node_update >;
/* ordered_set < T > s -> doesn't work well with pii
 * s.order_of_key(x) -> # of elements in s less than x
 * s.find_by_order(x) -> returns x^th smallest number in s (0 - based)
 */
endsnippet

snippet tvecuniq "Get unique elements from vector" b
sort(all(${1:vector name}));
$1.erase(unique(all($1)), $1.end());
endsnippet

snippet tmod "modular arithemetic" b
// Credits : https://codeforces.com/contest/1420/submission/93731409
template < int M >
struct modint {
	int val = 0;
	modint () {}
	modint (int x) : val(x) {
		while (val < 0) val += M;
		while (val >= M) val -= M;
	}
	modint (long long x): val(x % M) {
		if (val < 0) val += M;
	}
	modint operator+= (modint oth) {
		val += oth.val;
		if (val >= M) val -= M;
		return *this;
	}
	modint operator-= (modint oth) {
		val -= oth.val;
		if (val < 0) val += M;
		return *this;
	}
	modint operator*= (modint oth) {
		val = val * 1LL * oth.val % M;
		return *this;
	}
	void operator++ () {
		++val;
		if (val == M) val = 0;
	}
	void operator-- () {
		--val;
		if (val == -1) {
			val = M - 1;
		}
	}
	modint operator- () {
		modint res;
		res.val = (val == 0) ? 0 : M - val;
		return res;
	}
	int mod() {
		return M;
	}
	modint pow (int x) {
		modint base = val;
		modint res = 1;
		while (x > 0) {
			if (x & 1) res *= base;
			base *= base;
			x >>= 1;
		}
		return res;
	}
  modint pow (lli x) {
    modint base = val;
    modint res = 1;
    while (x > 0LL) {
      if (x & 1LL) res *= base;
      base *= base;
      x >>= 1LL;
    }
    return res;
  }
	modint inv () {
		return pow(M - 2);
	}
	friend modint operator+ (modint a, modint b) {
		return modint(a) += b;
	}
	friend modint operator- (modint a, modint b) {
		return modint(a) -= b;
	}
	friend modint operator* (modint a, modint b) {
		return modint(a) *= b;
	}
	friend bool operator== (modint a, modint b) {
		return a.val == b.val;
	}
	friend bool operator!= (modint a, modint b) {
		return a.val != b.val;
	}
};

using mint = modint < ${1: modulus value } >;

const int ${2: limit name} = ${3: limit};

mint fact[$2];
mint inv_fact[$2];

inline mint nCk (int n, int k) {
	return k > n ? 0 : fact[n] * inv_fact[k] * inv_fact[n - k];
}

inline void genFacAndInv () {
	fact[0] = 1;
	inv_fact[0] = 1;
	FOR(i, 1, $2 + 1) {
		fact[i] = fact[i - 1] * i;
		inv_fact[i] = fact[i].inv();
	}
}
endsnippet 

snippet teuclidex "Extended Euclidean" b
int extended_euclidean (int a, int b, lli &x, lli &y) {
  if (b == 0) {
    x = 1;
    y = 0;
    return a;
  }
  lli x1, y1;
  int d = extended_euclidean(b, a % b, x1, y1);
  x = y1;
  y = x1 - y1 * (a / b);
  return d;
}
endsnippet

snippet tST "Sparse Table" b
/* Credits: https://codeforces.com/contest/1548/submission/124526158
 * Usage: SparseTable < lli > st(vec, [&](lli i, ll j) { return __gcd(i, j); });
 * Indexing starts from 0 (NOT from 1)
 */
template < typename T, class F = function < T (const T&, const T&) >>
struct SparseTable {
  int n;
  vector < vector < T > > mat;
  F foo;

  SparseTable (const vector < T > &a, const F &f) : func (f) {
    n = sz(a);
    int max_log = __lg(n);
    mat[0] = a;
    FOR(j, 1, max_log) {
      mat[j].resize(n - (1 << j) + 1);
      FOR(i, 0, n - (1 << j) + 1) {
        mat[j][i] = foo(mat[j - 1][i], mat[j - 1][i + (1 << (j - 1))]);
      }
    }
  }
  T query (int l, int r) const {
    int lg = __lg(r - l + 1);
    return foo(mat[lg][l], mat[lg][r - (1 << lg) + 1]);
  }
};
endsnippet
